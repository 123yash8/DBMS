// Create Employee collection and insert documents
db.Employee.insertMany([
    {
        Name: {FName: 'John', LName: 'Doe'},
        Company_Name: 'TCS',
        Salary: 50000,
        Designation: 'Programmer',
        Age: 30,
        Expertise: ['Java', 'Python', 'MongoDB'],
        DOB: new Date('1990-01-01'),
        Email_id: 'john.doe@example.com',
        Contact: '1234567890',
        Address: [{PAddr: 'Address1', LAddr: 'Address2'}]
    },
    // Insert more documents...
]);

// 1. Select all documents where the Designation field has the value "Programmer" and the value of the salary field is greater than 30000.
db.Employee.find({Designation: 'Programmer', Salary: {$gt: 30000}});

// 2. Creates a new document if no document in the employee collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}
db.Employee.updateOne(
    {Designation: 'Tester', Company_Name: 'TCS', Age: 25},
    {$setOnInsert: {Designation: 'Tester', Company_Name: 'TCS', Age: 25}},
    {upsert: true}
);

// 3. Increase salary of each Employee working with â€œInfosys" by 10000.
db.Employee.updateMany(
    {Company_Name: 'Infosys'},
    {$inc: {Salary: 10000}}
);

// 4. Finds all employees working with "TCS" and reduce their salary by 5000.
db.Employee.updateMany(
    {Company_Name: 'TCS'},
    {$inc: {Salary: -5000}}
);

// 5. Return documents where Designation is not equal to "Tester".
db.Employee.find({Designation: {$ne: 'Tester'}});

// 6. Find all employee with Exact Match on an Array having Expertise: ['Mongodb','Mysql','Cassandra']
db.Employee.find({Expertise: {$all: ['Mongodb', 'Mysql', 'Cassandra']}});

// 7. Create view which shows Iname, Price and Count of all stationary items in descending order of price
db.createView(
    'View1',
    'Employee',
    [
        {$match: {Itype: 'stationary'}},
        {$project: {Iname: 1, Iprice: 1, Icount: 1}},
        {$sort: {Iprice: -1}}
    ]
);
