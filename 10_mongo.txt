// Create Employee collection and insert documents
db.Employee.insertMany([
    {
        Name: {FName: 'John', LName: 'Doe'},
        Company_Name: 'TCS',
        Salary: 50000,
        Designation: 'Programmer',
        Age: 30,
        Expertise: ['Java', 'Python', 'MongoDB'],
        DOB: new Date('1990-01-01'),
        Email_id: 'john.doe@example.com',
        Contact: '1234567890',
        Address: [{PAddr: 'Address1', LAddr: 'Address2'}]
    },
    // Insert more documents...
]);

// 1. Find name of Employee where age is less than 30 and salary more than 50000.
db.Employee.find({Age: {$lt: 30}, Salary: {$gt: 50000}}, {Name: 1});

// 2. Creates a new document if no document in the employee collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}
db.Employee.updateOne(
    {Designation: 'Tester', Company_Name: 'TCS', Age: 25},
    {$setOnInsert: {Designation: 'Tester', Company_Name: 'TCS', Age: 25}},
    {upsert: true}
);

// 3. Selects all documents in the collection where the field age has a value less than 30 or the value of the salary field is greater than 40000.
db.Employee.find({$or: [{Age: {$lt: 30}}, {Salary: {$gt: 40000}}]});

// 4. Find documents where Designation is not equal to "Developer".
db.Employee.find({Designation: {$ne: 'Developer'}});

// 5. Find _id, Designation, Address and Name from all documents where Company_name is "Infosys".
db.Employee.find({Company_Name: 'Infosys'}, {_id: 1, Designation: 1, Address: 1, Name: 1});

// 6. Display only FName and LName of all Employees
db.Employee.find({}, {'Name.FName': 1, 'Name.LName': 1});
